import sys
import chess
import chess.svg
import time

try:
    from PySide6.QtWidgets import QApplication, QWidget, QVBoxLayout
    from PySide6.QtSvgWidgets import QSvgWidget
    from PySide6.QtCore import QByteArray
    PYSIDE6_AVAILABLE = True
except ImportError:
    PYSIDE6_AVAILABLE = False


class ChessRenderer:
    def __init__(self, gui_mode=False):
        self.gui_mode = gui_mode and PYSIDE6_AVAILABLE
        self.app = None
        self.widget = None
        
        if self.gui_mode:
            # Only create QApplication if we don't have one
            if not QApplication.instance():
                self.app = QApplication(sys.argv)
            else:
                self.app = QApplication.instance()
            
            self.widget = ChessWidget()
            self.widget.show()
        else:
            print("Chess renderer in console mode")

    def render_board(self, board: chess.Board):
        if self.gui_mode and self.widget:
            svg_data = chess.svg.board(board, size=400)
            byte_array = QByteArray(svg_data.encode("utf-8"))
            self.widget.svg_widget.load(byte_array)
            
            # process events to update the GUI
            if self.app:
                # self.app.processEvents()
                # # Force widget repaint
                # self.widget.svg_widget.repaint()
                # self.widget.repaint()
                # # Process any events generated by repaint
                self.app.processEvents()
                time.sleep(5)
        else:
            # Console fallback
            print(board)
            print("-" * 40)

    def start(self):
        if self.gui_mode and self.app:
            self.app.exec()

    def close(self):
        if self.gui_mode and self.widget:
            self.widget.close()


class ChessWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Chess Board")
        self.setGeometry(100, 100, 500, 500)

        layout = QVBoxLayout()
        self.svg_widget = QSvgWidget()
        layout.addWidget(self.svg_widget)
        self.setLayout(layout)


